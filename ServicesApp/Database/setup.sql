/*
Deployment script for ServiceApp

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "ServiceApp"
:setvar DefaultFilePrefix "ServiceApp"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating database $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)] COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating Table [dbo].[Logs]...';


GO
CREATE TABLE [dbo].[Logs] (
    [Id]             INT            IDENTITY (1, 1) NOT NULL,
    [AuthorId]       NVARCHAR (50)  NULL,
    [RequestedUrl]   NVARCHAR (50)  NOT NULL,
    [Method]         NVARCHAR (50)  NOT NULL,
    [RequestedArgs]  NVARCHAR (MAX) NULL,
    [RequestedDate]  DATETIME2 (7)  NOT NULL,
    [Description]    NVARCHAR (MAX) NULL,
    [ResponeMessage] NVARCHAR (MAX) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Products]...';


GO
CREATE TABLE [dbo].[Products] (
    [ProductId]   INT            IDENTITY (1, 1) NOT NULL,
    [Name]        NVARCHAR (50)  NOT NULL,
    [Description] NVARCHAR (MAX) NULL,
    [Price]       MONEY          NOT NULL,
    [Quantity]    INT            NULL,
    [IsAvaliable] BIT            NOT NULL,
    PRIMARY KEY CLUSTERED ([ProductId] ASC)
);


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Products]...';


GO
ALTER TABLE [dbo].[Products]
    ADD DEFAULT 1 FOR [IsAvaliable];


GO
PRINT N'Creating Procedure [dbo].[sp_LogsAdd]...';


GO
CREATE PROCEDURE [dbo].[sp_LogsAdd]
	@AuthorId nvarchar(50),
	@RequestedUrl nvarchar(50),
	@Method NVARCHAR(50),
	@RequestedArgs nvarchar(MAX),
	@Date datetime2(7),
	@Description nvarchar(MAX),
	@ResponeMessage nvarchar(MAX)
AS
BEGIN
	INSERT INTO Logs(AuthorId, RequestedDate, Method, RequestedArgs,
						[Description], RequestedUrl, ResponeMessage)
	VALUES(@AuthorId,@Date, @Method, @RequestedArgs, @Description,
				@RequestedUrl, @ResponeMessage);
END
GO
PRINT N'Creating Procedure [dbo].[sp_LogsGet]...';


GO
CREATE PROCEDURE [dbo].[sp_LogsGet]
AS
BEGIN
	set nocount on;
	SELECT 
		l.AuthorId as AuthorId, l.RequestedUrl as RequestedUrl,
		l.Method as Method, l.RequestedArgs as RequestedArgs,
		l.RequestedDate as RequestedDate, l.[Description] as [Description],
		l.ResponeMessage as ResponeMessage
	FROM Logs as l
	ORDER BY l.RequestedDate DESC
END
GO
PRINT N'Creating Procedure [dbo].[sp_LogsGetFromLastHour]...';


GO
CREATE PROCEDURE [dbo].[sp_LogsGetFromLastHour]
	@Date datetime2
AS
BEGIN
	set nocount on;
	SELECT 
		l.AuthorId as AuthorId, l.RequestedUrl as RequestedUrl,
		l.Method as Method, l.RequestedArgs as RequestedArgs,
		l.RequestedDate as RequestedDate, l.[Description] as [Description],
		l.ResponeMessage as ResponeMessage
	FROM Logs as l
	WHERE l.RequestedDate >= @Date
	ORDER BY l.RequestedDate DESC
END
GO
PRINT N'Creating Procedure [dbo].[sp_ProductsAdd]...';


GO
CREATE PROCEDURE [dbo].[sp_ProductsAdd]
	@Name nvarchar(50),
	@Description nvarchar(MAX),
	@Price money,
	@Quantity int
AS
BEGIN
	INSERT INTO Products([Name], [Description], Price, Quantity)
	VALUES( @Name, @Description, @Price, @Quantity)
END
GO
PRINT N'Creating Procedure [dbo].[sp_ProductsDel]...';


GO
CREATE PROCEDURE [dbo].[sp_ProductsDel]
	@ProductId int
AS
BEGIN
	UPDATE Products set IsAvaliable = 0 WHERE ProductId = @ProductId;
END
GO
PRINT N'Creating Procedure [dbo].[sp_ProductsGet]...';


GO
CREATE PROCEDURE [dbo].[sp_ProductsGet]
AS
BEGIN
	SELECT p.ProductId, p.[Name], p.[Description], p.Price, p.Quantity
		FROM Products as p where IsAvaliable = 1
END
GO
PRINT N'Creating Procedure [dbo].[sp_ProductsUpdatePrice]...';


GO
CREATE PROCEDURE [dbo].[sp_ProductsUpdatePrice]
	@ProductId int,
	@NewPrice money
AS
BEGIN
	UPDATE Products set Price = @NewPrice WHERE ProductId = @ProductId;
END
GO
PRINT N'Creating Procedure [dbo].[sp_ProductsUpdateQuantity]...';


GO
CREATE PROCEDURE [dbo].[sp_ProductsUpdateQuantity]
	@ProductId int,
	@NewQuantity int
AS
BEGIN
	UPDATE Products set Quantity = @NewQuantity WHERE ProductId = @ProductId;
END
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '90789cd5-9fe8-4e1a-a3a9-ab3e3532c4df')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('90789cd5-9fe8-4e1a-a3a9-ab3e3532c4df')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'b7c6dd72-c01c-4031-a96f-78d49b1bd932')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('b7c6dd72-c01c-4031-a96f-78d49b1bd932')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '9d5133cb-2fdc-42e2-a94a-fdfd6823ebe4')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('9d5133cb-2fdc-42e2-a94a-fdfd6823ebe4')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '14c14641-f59f-4349-bec6-348ab854e874')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('14c14641-f59f-4349-bec6-348ab854e874')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'c9af5007-6ebd-434a-a9d8-bf9f7bbb7aae')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('c9af5007-6ebd-434a-a9d8-bf9f7bbb7aae')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'b614a663-1889-4b9c-8c68-cf42f1a6057b')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('b614a663-1889-4b9c-8c68-cf42f1a6057b')

GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
